name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
  release:
    types: [created]

env:
  CARGO_TERM_COLOR: always

jobs:
  # 1. Lint & Format
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
      - name: Format check
        run: cargo fmt --all -- --check
      - name: Clippy
        run: cargo clippy --all-features -- -D warnings

  # 2. Test
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Run tests
        run: cargo test --all-features

  # 3. Build matrix (실패해도 계속 진행)
  build:
    needs: [lint, test]
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: linux-arm64
            cross: true
          - os: macos-13 # Intel runner
            target: x86_64-apple-darwin
            name: macos-x64
          - os: macos-latest # Apple Silicon runner
            target: aarch64-apple-darwin
            name: macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM)
        if: matrix.cross == true
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Add target
        run: rustup target add ${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: ${{ matrix.cross == true && 'aarch64-linux-gnu-gcc' || '' }}

      - name: Package binary (Unix)
        if: runner.os != 'Windows'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../boots-${{ matrix.name }}.tar.gz cargo-boots boots
          cd ../../..
          shasum -a 256 boots-${{ matrix.name }}.tar.gz > boots-${{ matrix.name }}.tar.gz.sha256

      - name: Package binary (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd target/${{ matrix.target }}/release
          Compress-Archive -Path cargo-boots.exe,boots.exe -DestinationPath ../../../boots-${{ matrix.name }}.zip
          cd ../../..
          (Get-FileHash boots-${{ matrix.name }}.zip -Algorithm SHA256).Hash | Out-File -Encoding ASCII boots-${{ matrix.name }}.zip.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: boots-${{ matrix.name }}
          path: |
            boots-${{ matrix.name }}.*
          retention-days: 7

  # 4. crates.io Release + GitHub Release (main 브랜치만)
  release:
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: dtolnay/rust-toolchain@stable

      # Download artifacts from build job
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # Prepare binaries
      - name: Prepare release files
        run: |
          mkdir -p release
          find artifacts -name 'boots-*' -type f -exec cp {} release/ \;
          ls -lah release/

      # Create checksums
      - name: Create checksums
        run: |
          cd release
          shasum -a 256 boots-*.tar.gz boots-*.zip > checksums.txt || true
          cat checksums.txt

      # Run release-plz (creates tag and release)
      - name: Run release-plz
        id: release-plz
        uses: MarcoIeni/release-plz-action@v0.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      # Upload binaries to the release created by release-plz
      - name: Upload binaries to release
        if: steps.release-plz.outputs.releases_created == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the latest release tag
          TAG=$(git describe --tags --abbrev=0)
          echo "Uploading to release $TAG"

          # Upload all files in release/ directory
          gh release upload "$TAG" release/* --clobber
